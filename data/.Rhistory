}
# plot
maint <- paste("Synthetic data simulation for", toString(run), "times. Fitting type:", type)
subt <- paste("Assuming that", toString(p*100), "% of data are preserved at 180 ka. Background:", toString(bg), "events/ka; Peak:", toString(pk), "events/ka")
last <- run + 1
plot <- ggplot()
for(i in 2:last){
gg.data <- data.frame(Time=output[,1], Events=output[,i])
plot<- plot+
geom_line(data=gg.data, aes(x=Time, y=Events),size = 0.5, colour="#A67C94", alpha = 0.05)
}
plot <- plot + scale_x_reverse(limits = c(180, 0.1),breaks = scales::pretty_breaks(n = 9)) +
ggtitle(maint, subt) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))+
scale_y_continuous(name = expression("Number of Volcanic Events per 1000 Years"), limits = c(0, 35))+
labs(y = "Counts",
x = "Time (Years BP)",
colour = "Parameter")
print(plot)
# return data
return(output)
} else if (type %in% "inverse"){
for(mc in 1:run){
# generate a new synthetic dataset
df <- synthetic_gen(bg, pk)
# calculate the number of events preserved in each time period
output$nextrun <- NA
df$prob <- NA
# In the linear case, the fitting curve y = k/(x + b) passes through (0,1) and (180, p)
# Therefore:
# b = -k and k/(180 + k) = p
# solve: k = 180*p/(1 - p)
# And the curve is: y = (180 * p / (1 - p))/ (x + (180 * p / (1 - p)))
# where y is the prob and x is ka
# And the number of preserved events is y * df$events[i]
for (i in 1:nrow(output)){
df$prob[i] <- (180 * p / (1 - p))/ (df$ka[i] + (180 * p / (1 - p)))
output$nextrun[i] <- df$prob[i] * df$events[i]
}
# set the column name
names(output)[mc+1] <- paste("Simu",toString(mc), sep = " ", collapse = NULL)
}
# plot
maint <- paste("Synthetic data simulation for", toString(run), "times. Fitting type:", type, "proportional")
subt <- paste("Assuming that", toString(p*100), "% of data are preserved at 180 ka. Background:", toString(bg), "events/ka; Peak:", toString(pk), "events/ka")
last <- run + 1
plot <- ggplot()
for(i in 2:last){
gg.data <- data.frame(Time=output[,1], Events=output[,i])
plot<- plot+
geom_line(data=gg.data, aes(x=Time, y=Events),size = 0.5, colour="#A67C94", alpha = 0.05)
}
plot <- plot + scale_x_reverse(limits = c(180, 0.1),breaks = scales::pretty_breaks(n = 9)) +
ggtitle(maint, subt) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))+
scale_y_continuous(name = expression("Number of Volcanic Events per 1000 Years"), limits = c(0, 35))+
labs(y = "Counts",
x = "Time (Years BP)",
colour = "Parameter")
print(plot)
# return data
return(output)
} else if (type %in% "log"){
# for convenience in natural log calculation, we use probability of DROPPING instead of KEEPING
# so we need to initiating a new var called p1
p1 <- 1 - p
for(mc in 1:run){
# generate a new synthetic dataset
df <- synthetic_gen(bg, pk)
# calculate the number of events preserved in each time period
output$nextrun <- NA
df$prob <- NA
# In the natural log case, the fitting curve y = ln(x+b)/k passes through (0,1) and (180, p1)
# detailed calculation could be found on the github folder as naturalLog.jpg
# And the curve is: y = ln(x+1)/(5.198/p1)
# And the number of preserved events is (1-y) * df$events[i]
for (i in 1:nrow(output)){
df$prob[i] <- 1- (log(df$ka[i] + 1) / (5.198 / p1))
output$nextrun[i] <- df$prob[i] * df$events[i]
}
# set the column name
names(output)[mc+1] <- paste("Simu",toString(mc), sep = " ", collapse = NULL)
}
# plot
maint <- paste("Synthetic data simulation for", toString(run), "times. Fitting type: natural", type)
subt <- paste("Assuming that", toString(p*100), "% of data are preserved at 180 ka. Background:", toString(bg), "events/ka; Peak:", toString(pk), "events/ka")
last <- run + 1
plot <- ggplot()
for(i in 2:last){
gg.data <- data.frame(Time=output[,1], Events=output[,i])
plot<- plot+
geom_line(data=gg.data, aes(x=Time, y=Events),size = 0.5, colour="#A67C94", alpha = 0.05)
}
plot <- plot + scale_x_reverse(limits = c(180, 0.1),breaks = scales::pretty_breaks(n = 9)) +
ggtitle(maint, subt) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))+
scale_y_continuous(name = expression("Number of Volcanic Events per 1000 Years"), limits = c(0, 35))+
labs(y = "Counts",
x = "Time (Years BP)",
colour = "Parameter")
print(plot)
# return data
return(output)
} else {
error <- "Fitting curve options: linear, log or inverse"
print(error)
return(NA)
}
}
testDF3 <- mc_syn("log", 0.1, 100, 5, 10)
testDF3 <- mc_syn("log", 0.25, 100, 5, 10)
testDF3 <- mc_syn("log", 0.25, 100, 5, 30)
setwd("~/GitHub/paleo_data_spatial/data")
library(readr)
library(ggplot2)
metadata <- read_csv("raw_data.csv")
library(readr)
library(ggplot2)
raw_data <- read_csv("raw_data.csv")
View(raw_data)
metadata <- read_csv("Anomaly_metadata_new.csv")
raw_data[1,0]
c=raw_data[0,1]
c
raw_data[1,]
raw_data[,1]
raw_data[2,1]
Summary(raw_data)
summary(raw_data)
raw_data$area[1]
raw_dta[,6]
raw_data[,6]
result <- data.frame(matrix(vector(), nrow(raw_data), 4, dimnames=list(c(), c("time", "total_area", "total_anomaly_area", "average"))))
View(result)
result <- data.frame(matrix(vector(), nrow(raw_data), 5, dimnames=list(c(), c("time", "total_area", "total_anomaly_area", "average", "1sd_error"))))
View(result)
result <- data.frame(matrix(vector(), nrow(raw_data), 5, dimnames=list(c(), c("time", "total_area", "total_anomaly_area", "average", "st_error"))))
View(result)
library(stats)
testVector <- vector()
vector <- c(1,4,4,2,2)
testVector <- c(2l4,4,3,66,3)
sd(vector, na.rm=TRUE)
vector <- c(2,NA,4,4,6,4,111)
sd(vector, na.rm=TRUE)
result <- data.frame(matrix(vector(), nrow(raw_data), 5, dimnames=list(c(), c("time", "total_area", "total_anomaly_area", "average", "st_error"))))
for(i in 6:226){
total_area <- 0
sum_anomaly <- 0
this_anomaly <- 0
weighted_result <- 0
working <- data.frame(matrix(vector(), nrow(raw_data), 4, dimnames=list(c(),c("grid","area","raw","weighted"))))
for(j in 1:nrow(raw_data)){
working$grid[j] <- raw_data$PageName[j]
working$raw[j] <- raw_data[j,i]
working$area[j] <- raw_data$area[j]
if(raw_data!=0){
this_anomaly <- raw_data$area[j] * raw_data[j,i]
total_area <- total_area + raw_data$area[j]
sum_anomaly <- sum_anomaly + this_anomaly
}
}
anomaly_result <- sum_anomaly/total_area
result$time[i] <- i
result$total_area[i] <- total_area
result$total_anomaly_area[i] <- sum_anomaly
result$average[i] <- anomaly_result
for(x in 1:nrow(working)){
working$weighted[x] <- working$raw[x] * (working$area[x]/total_area)
if(working$weighted[x] == 0){
working$weighted[x]<- NA
}
}
weighted_result <- sd(working$weight, na.rm = TRUE)
result$st_error[j] <- weighted_result
}
View(working)
result <- data.frame(matrix(vector(), nrow(raw_data), 5, dimnames=list(c(), c("time", "total_area", "total_anomaly_area", "average", "st_error"))))
for(i in 6:226){
total_area <- 0
sum_anomaly <- 0
this_anomaly <- 0
weighted_result <- 0
working <- data.frame(matrix(vector(), nrow(raw_data), 4, dimnames=list(c(),c("grid","area","raw","weighted"))))
for(j in 1:nrow(raw_data)){
working$grid[j] <- raw_data$PageName[j]
working$raw[j] <- raw_data[j,i]
working$area[j] <- raw_data$area[j]
if(raw_data[j,i]!=0){
this_anomaly <- raw_data$area[j] * raw_data[j,i]
total_area <- total_area + raw_data$area[j]
sum_anomaly <- sum_anomaly + this_anomaly
}
}
anomaly_result <- sum_anomaly/total_area
result$time[i-5] <- i-5
result$total_area[i-5] <- total_area
result$total_anomaly_area[i-5] <- sum_anomaly
result$average[i-5] <- anomaly_result
for(x in 1:nrow(working)){
working$weighted[x] <- working$raw[x] * (working$area[x]/total_area)
if(working$weighted[x] == 0){
working$weighted[x]<- NA
}
}
weighted_result <- sd(working$weight, na.rm = TRUE)
result$st_error[i-5] <- weighted_result
}
working$area[x]
working$area[x]/total_area
working$raw[x] * (working$area[x]/total_area)
working$raw[x]
as.numeric(working$raw[x])
as.numeric(working$raw[x]) * (working$area[x]/total_area)
result <- data.frame(matrix(vector(), nrow(raw_data), 5, dimnames=list(c(), c("time", "total_area", "total_anomaly_area", "average", "st_error"))))
for(i in 6:226){
total_area <- 0
sum_anomaly <- 0
this_anomaly <- 0
weighted_result <- 0
working <- data.frame(matrix(vector(), nrow(raw_data), 4, dimnames=list(c(),c("grid","area","raw","weighted"))))
for(j in 1:nrow(raw_data)){
working$grid[j] <- raw_data$PageName[j]
working$raw[j] <- raw_data[j,i]
working$area[j] <- raw_data$area[j]
if(raw_data[j,i]!=0){
this_anomaly <- raw_data$area[j] * raw_data[j,i]
total_area <- total_area + raw_data$area[j]
sum_anomaly <- sum_anomaly + this_anomaly
}
}
anomaly_result <- sum_anomaly/total_area
result$time[i-5] <- i-5
result$total_area[i-5] <- total_area
result$total_anomaly_area[i-5] <- sum_anomaly
result$average[i-5] <- anomaly_result
for(x in 1:nrow(working)){
working$weighted[x] <- as.numeric(working$raw[x]) * (working$area[x]/total_area)
if(working$weighted[x] == 0){
working$weighted[x]<- NA
}
}
weighted_result <- sd(working$weight, na.rm = TRUE)
result$st_error[i-5] <- weighted_result
}
View(result)
result <- data.frame(matrix(vector(), 220, 5, dimnames=list(c(), c("time", "total_area", "total_anomaly_area", "average", "st_error"))))
for(i in 6:226){
total_area <- 0
sum_anomaly <- 0
this_anomaly <- 0
weighted_result <- 0
working <- data.frame(matrix(vector(), nrow(raw_data), 4, dimnames=list(c(),c("grid","area","raw","weighted"))))
for(j in 1:nrow(raw_data)){
working$grid[j] <- raw_data$PageName[j]
working$raw[j] <- raw_data[j,i]
working$area[j] <- raw_data$area[j]
if(raw_data[j,i]!=0){
this_anomaly <- raw_data$area[j] * raw_data[j,i]
total_area <- total_area + raw_data$area[j]
sum_anomaly <- sum_anomaly + this_anomaly
}
}
anomaly_result <- sum_anomaly/total_area
result$time[i-5] <- i-5
result$total_area[i-5] <- total_area
result$total_anomaly_area[i-5] <- sum_anomaly
result$average[i-5] <- anomaly_result
for(x in 1:nrow(working)){
working$weighted[x] <- as.numeric(working$raw[x]) * (working$area[x]/total_area)
if(working$weighted[x] == 0){
working$weighted[x]<- NA
}
}
weighted_result <- sd(working$weight, na.rm = TRUE)
result$st_error[i-5] <- weighted_result
}
result <- data.frame(matrix(vector(), 221, 5, dimnames=list(c(), c("time", "total_area", "total_anomaly_area", "average", "st_error"))))
for(i in 6:226){
total_area <- 0
sum_anomaly <- 0
this_anomaly <- 0
weighted_result <- 0
working <- data.frame(matrix(vector(), nrow(raw_data), 4, dimnames=list(c(),c("grid","area","raw","weighted"))))
for(j in 1:nrow(raw_data)){
working$grid[j] <- raw_data$PageName[j]
working$raw[j] <- raw_data[j,i]
working$area[j] <- raw_data$area[j]
if(raw_data[j,i]!=0){
this_anomaly <- raw_data$area[j] * raw_data[j,i]
total_area <- total_area + raw_data$area[j]
sum_anomaly <- sum_anomaly + this_anomaly
}
}
anomaly_result <- sum_anomaly/total_area
result$time[i-5] <- i-5
result$total_area[i-5] <- total_area
result$total_anomaly_area[i-5] <- sum_anomaly
result$average[i-5] <- anomaly_result
for(x in 1:nrow(working)){
working$weighted[x] <- as.numeric(working$raw[x]) * (working$area[x]/total_area)
if(working$weighted[x] == 0){
working$weighted[x]<- NA
}
}
weighted_result <- sd(working$weight, na.rm = TRUE)
result$st_error[i-5] <- weighted_result
}
result <- data.frame(matrix(vector(), 221, 5, dimnames=list(c(), c("time", "total_area", "total_anomaly_area", "average", "st_error"))))
for(i in 6:226){
total_area <- 0
sum_anomaly <- 0
this_anomaly <- 0
weighted_result <- 0
working <- data.frame(matrix(vector(), nrow(raw_data), 4, dimnames=list(c(),c("grid","area","raw","weighted"))))
for(j in 1:nrow(raw_data)){
working$grid[j] <- raw_data$PageName[j]
working$raw[j] <- raw_data[j,i]
working$area[j] <- raw_data$area[j]
if(raw_data[j,i]!=0){
this_anomaly <- raw_data$area[j] * raw_data[j,i]
total_area <- total_area + raw_data$area[j]
sum_anomaly <- sum_anomaly + this_anomaly
}
}
anomaly_result <- sum_anomaly/total_area
result$time[i-5] <- i-6
result$total_area[i-5] <- total_area
result$total_anomaly_area[i-5] <- sum_anomaly
result$average[i-5] <- anomaly_result
for(x in 1:nrow(working)){
working$weighted[x] <- as.numeric(working$raw[x]) * (working$area[x]/total_area)
if(working$weighted[x] == 0){
working$weighted[x]<- NA
}
}
weighted_result <- sd(working$weight, na.rm = TRUE)
result$st_error[i-5] <- weighted_result
cat("Processing t", i-6)
}
result$upper
result$upper[1]<-0
for(i in 1:nrow(result)){
result$upper[i] <- result$average[i] + result$st_error[i]
result$lower[i] <- result$average[i] - result$st_error[i]
}
for(i in 1:nrow(result)){
result$upper[i] <- as.numeric(result$average[i]) + result$st_error[i]
result$lower[i] <- as.numeric(result$average[i]) - result$st_error[i]
}
View(result)
ave <- ggplot()+
geom_ribbon(data=result, aes(x=time, ymin=lower, ymax=upper),fill="#71afd1", alpha=0.5)+
geom_line(data=result, aes(x=time, y=average), size = 1.2, colour ="#6868a8")+
labs(y = "Anomaly (Celsius)",
x = "Time (Years BP)",
colour = "Legend") +
ggtitle("Global Avereage Temperature Anomaly, Area Weighted","Anomaly reference: the average temperature from 8ka to 12 ka")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_text(size=10),
axis.title.y=element_text(size=10)
) +
scale_x_reverse(limits = c(22000, 0))+
annotate("text", x = 20000, y = -5, label = "1-Sigma Uncertainty", size = 3 ,colour = "#457a96")+
geom_hline(yintercept=0, linetype="dashed", color = "red")+
geom_vline(xintercept=12000, linetype="dashed", color = "red")+
geom_vline(xintercept=8000, linetype="dashed", color = "red")
ave
for(i in 1:nrow(result)){
result$average[i] <- as.numeric(result$average[i])
result$upper[i] <- as.numeric(result$average[i]) + result$st_error[i]
result$lower[i] <- as.numeric(result$average[i]) - result$st_error[i]
}
for(i in 1:nrow(result)){
result$average2[i] <- as.numeric(result$average[i])
result$upper[i] <- as.numeric(result$average[i]) + result$st_error[i]
result$lower[i] <- as.numeric(result$average[i]) - result$st_error[i]
}
plot_data <- data.frame(Years = result$time, Average = result$average2, Lower = result$lower, Upper = result$upper)
ave <- ggplot()+
geom_ribbon(data=plot_data, aes(x=Years, ymin=Lower, ymax=Upper),fill="#71afd1", alpha=0.5)+
geom_line(data=plot_data, aes(x=Years, y=Average), size = 1.2, colour ="#6868a8")+
labs(y = "Anomaly (Celsius)",
x = "Time (Years BP)",
colour = "Legend") +
ggtitle("Global Avereage Temperature Anomaly, Area Weighted","Anomaly reference: the average temperature from 8ka to 12 ka")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_text(size=10),
axis.title.y=element_text(size=10)
) +
scale_x_reverse(limits = c(22000, 0))+
annotate("text", x = 20000, y = -5, label = "1-Sigma Uncertainty", size = 3 ,colour = "#457a96")+
geom_hline(yintercept=0, linetype="dashed", color = "red")+
geom_vline(xintercept=12000, linetype="dashed", color = "red")+
geom_vline(xintercept=8000, linetype="dashed", color = "red")
ave
for(i in 1:nrow(result)){
result$time_plot[i] <- result$time[i] * 100
result$average_plot[i] <- as.numeric(result$average[i])
result$upper[i] <- as.numeric(result$average[i]) + result$st_error[i]
result$lower[i] <- as.numeric(result$average[i]) - result$st_error[i]
}
plot_data <- data.frame(Years = result$time_plot, Average = result$average_plot, Lower = result$lower, Upper = result$upper)
ave <- ggplot()+
geom_ribbon(data=plot_data, aes(x=Years, ymin=Lower, ymax=Upper),fill="#71afd1", alpha=0.5)+
geom_line(data=plot_data, aes(x=Years, y=Average), size = 1.2, colour ="#6868a8")+
labs(y = "Anomaly (Celsius)",
x = "Time (Years BP)",
colour = "Legend") +
ggtitle("Global Avereage Temperature Anomaly, Area Weighted","Anomaly reference: the average temperature from 8ka to 12 ka")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_text(size=10),
axis.title.y=element_text(size=10)
) +
scale_x_reverse(limits = c(22000, 0))+
annotate("text", x = 20000, y = -5, label = "1-Sigma Uncertainty", size = 3 ,colour = "#457a96")+
geom_hline(yintercept=0, linetype="dashed", color = "red")+
geom_vline(xintercept=12000, linetype="dashed", color = "red")+
geom_vline(xintercept=8000, linetype="dashed", color = "red")
ave
ave <- ggplot()+
geom_ribbon(data=plot_data, aes(x=Years, ymin=Lower, ymax=Upper),fill="#71afd1", alpha=0.5)+
geom_line(data=plot_data, aes(x=Years, y=Average), size = 0.5, colour ="#6868a8")+
labs(y = "Anomaly (Celsius)",
x = "Time (Years BP)",
colour = "Legend") +
ggtitle("Global Avereage Temperature Anomaly, Area Weighted","Anomaly reference: the average temperature from 8ka to 12 ka")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_text(size=10),
axis.title.y=element_text(size=10)
) +
scale_x_reverse(limits = c(22000, 0))+
annotate("text", x = 20000, y = -5, label = "1-Sigma Uncertainty", size = 3 ,colour = "#457a96")+
geom_hline(yintercept=0, linetype="dashed", color = "red")+
geom_vline(xintercept=12000, linetype="dashed", color = "red")+
geom_vline(xintercept=8000, linetype="dashed", color = "red")
ave
ave <- ggplot()+
geom_ribbon(data=plot_data, aes(x=Years, ymin=Lower, ymax=Upper),fill="#71afd1", alpha=0.5)+
geom_line(data=plot_data, aes(x=Years, y=Average), size = 0.5, colour ="#6868a8")+
labs(y = "Anomaly (Celsius)",
x = "Time (Years BP)",
colour = "Legend") +
ggtitle("Global Avereage Temperature Anomaly, Area Weighted","Anomaly reference: the average temperature from 8ka to 12 ka")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_text(size=10),
axis.title.y=element_text(size=10)
) +
scale_x_reverse(limits = c(22000, 0))+
scale_y_continuous(breaks = c(-4, -3, -2, -1, 0))
annotate("text", x = 20000, y = -5, label = "1-Sigma Uncertainty", size = 3 ,colour = "#457a96")+
geom_hline(yintercept=0, linetype="dashed", color = "red")+
geom_vline(xintercept=12000, linetype="dashed", color = "red")+
geom_vline(xintercept=8000, linetype="dashed", color = "red")
ave
ave <- ggplot()+
geom_ribbon(data=plot_data, aes(x=Years, ymin=Lower, ymax=Upper),fill="#71afd1", alpha=0.5)+
geom_line(data=plot_data, aes(x=Years, y=Average), size = 0.5, colour ="#6868a8")+
labs(y = "Anomaly (Celsius)",
x = "Time (Years BP)",
colour = "Legend") +
ggtitle("Global Avereage Temperature Anomaly, Area Weighted","Anomaly reference: the average temperature from 8ka to 12 ka")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_text(size=10),
axis.title.y=element_text(size=10)
) +
scale_x_reverse(limits = c(22000, 0))+
scale_y_continuous(breaks = c(-4, -3, -2, -1, 0))+
annotate("text", x = 20000, y = -5, label = "1-Sigma Uncertainty", size = 3 ,colour = "#457a96")+
geom_hline(yintercept=0, linetype="dashed", color = "red")+
geom_vline(xintercept=12000, linetype="dashed", color = "red")+
geom_vline(xintercept=8000, linetype="dashed", color = "red")
ave
ave <- ggplot()+
geom_ribbon(data=plot_data, aes(x=Years, ymin=Lower, ymax=Upper),fill="#71afd1", alpha=0.5)+
geom_line(data=plot_data, aes(x=Years, y=Average), size = 0.5, colour ="#6868a8")+
labs(y = "Anomaly (Celsius)",
x = "Time (Years BP)",
colour = "Legend") +
ggtitle("Global Avereage Temperature Anomaly, Area Weighted","Anomaly reference: the average temperature from 8ka to 12 ka")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_text(size=10),
axis.title.y=element_text(size=10)
) +
scale_x_reverse(limits = c(22000, 0))+
scale_y_continuous(breaks = c(-4, -3, -2, -1, 0, 1))+
annotate("text", x = 20000, y = -5, label = "1-Sigma Uncertainty", size = 3 ,colour = "#457a96")+
geom_hline(yintercept=0, linetype="dashed", color = "red")+
geom_vline(xintercept=12000, linetype="dashed", color = "red")+
geom_vline(xintercept=8000, linetype="dashed", color = "red")
ave
write.csv(file="new_weighted_calculation.csv")
write.csv(result, file="new_weighted_calculation.csv")
write.csv(result, file="new_weighted_calculation.csv", row.names = TRUE)
output <- data.frame()
output$time <- result$time_plot
output <- data.frame(matrix(vector(), 221, 3, dimnames=list(c(), c("time", "average", "st_error"))))
output$time <- result$time_plot
output$average <- result$average2
output$st_error <- result$st_error
View(output)
write.csv(output, file="new_weighted_calculation.csv", row.names = TRUE)
